#!/bin/bash

# Git commit-msg hook to enforce conventional commits and 75 character limit
# Ensures commit messages follow the pattern: type(scope): subject
# Also prevents AI attribution in commit messages

# Read the commit message
commit_msg=$(head -1 "$1")

# Remove any leading/trailing whitespace
commit_msg=$(echo "$commit_msg" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

# Check if it's a merge commit (skip validation for merges)
if grep -q "^Merge" "$1"; then
    exit 0
fi

# Check if it's a revert commit (allow slightly longer for reverts)
if grep -q "^Revert" "$1"; then
    # Revert commits are allowed, check for proper format
    if ! echo "$commit_msg" | grep -qE '^Revert ".{1,50}"$'; then
        echo "‚ùå ERROR: Invalid revert commit format"
        echo "   Your message: \"$commit_msg\""
        echo "   Expected format: Revert \"original commit message\""
        exit 1
    fi
    exit 0
fi

# Define allowed commit types (Conventional Commits)
allowed_types="feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert"

# Check for conventional commit format
# Pattern: type(scope): subject  OR  type: subject
# The scope is optional
conventional_regex="^($allowed_types)(\([a-z0-9\-]+\))?: .+"

if ! echo "$commit_msg" | grep -qE "$conventional_regex"; then
    echo "‚ùå ERROR: Commit message must follow Conventional Commits format"
    echo ""
    echo "   Your message: \"$commit_msg\""
    echo ""
    echo "   Required format: <type>[optional scope]: <description>"
    echo ""
    echo "   Examples:"
    echo "     feat: add user authentication"
    echo "     fix(auth): resolve login timeout issue"
    echo "     docs: update README with new examples"
    echo ""
    echo "   Allowed types:"
    echo "     feat     - A new feature"
    echo "     fix      - A bug fix"
    echo "     docs     - Documentation changes"
    echo "     style    - Code style changes (formatting, etc)"
    echo "     refactor - Code refactoring"
    echo "     perf     - Performance improvements"
    echo "     test     - Adding or updating tests"
    echo "     build    - Build system changes"
    echo "     ci       - CI/CD changes"
    echo "     chore    - Maintenance tasks"
    echo "     revert   - Revert a previous commit"
    exit 1
fi

# Check for forbidden attribution patterns in the entire commit message
if grep -qiE "(generated with|generated by|co-authored-by|created with|created by|made with|made by|built with|built by|powered by|ü§ñ|claude|anthropic|gpt|copilot|ai assistant|artificial intelligence)" "$1"; then
    echo "‚ùå ERROR: Attribution text detected in commit message"
    echo ""
    echo "   Commit messages must not contain attribution to AI tools or assistants."
    echo "   Remove any 'Generated with', 'Co-Authored-By', or similar attribution."
    exit 1
fi

# Check the length (75 character limit for first line)
if [ ${#commit_msg} -gt 75 ]; then
    echo "‚ùå ERROR: Commit message first line exceeds 75 characters"
    echo ""
    echo "   Your message: \"$commit_msg\""
    echo "   Length: ${#commit_msg} characters (max 75)"
    echo ""
    echo "   Tip: Keep the first line concise. Add details in the body if needed."
    exit 1
fi

exit 0